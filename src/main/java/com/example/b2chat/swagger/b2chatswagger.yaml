openapi: 3.0.0
info:
  title: b2chat
  version: 1.0.0
servers:
  - url: http://localhost:8080
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
paths:
  /v1/users:
    post:
      tags:
        - General
      summary: create
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: pepito
                password: StrongPwd1!
                email: pepito@gmail.com
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          headers:
            Vary:
              schema:
                type: string
                example: Access-Control-Request-Headers
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            Cache-Control:
              schema:
                type: string
                example: no-cache, no-store, max-age=0, must-revalidate
            Pragma:
              schema:
                type: string
                example: no-cache
            Expires:
              schema:
                type: integer
                example: '0'
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Content-Type:
              schema:
                type: string
                example: application/json
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Date:
              schema:
                type: string
                example: Wed, 06 Dec 2023 16:22:25 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=60
            Connection:
              schema:
                type: string
                example: keep-alive
          content:
            application/json:
              schema:
                type: object
              example:
                id: 3
                username: pepito
                password: $2a$10$4rGRLQkvJRrieQwoqQGrO.SeMQk5MhZNpGc77UZrxlrZRs10Fj1di
                email: pepito@gmail.com
  /v1/users/2:
    put:
      tags:
        - General
      summary: update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: actualizar
                password: StrongPwd1!
                email: actualizar@gmail.com
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Date:
              schema:
                type: string
                example: Wed, 06 Dec 2023 03:54:45 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=60
            Connection:
              schema:
                type: string
                example: keep-alive
          content:
            application/json:
              schema:
                type: object
              example:
                id: 2
                username: actualizar
                password: StrongPwd1!
                email: actualizar@gmail.com
  /v1/users/1:
    get:
      tags:
        - General
      summary: getbyId
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          headers:
            Vary:
              schema:
                type: string
                example: Access-Control-Request-Headers
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            Cache-Control:
              schema:
                type: string
                example: no-cache, no-store, max-age=0, must-revalidate
            Pragma:
              schema:
                type: string
                example: no-cache
            Expires:
              schema:
                type: integer
                example: '0'
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Content-Type:
              schema:
                type: string
                example: application/json
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Date:
              schema:
                type: string
                example: Wed, 06 Dec 2023 16:54:26 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=60
            Connection:
              schema:
                type: string
                example: keep-alive
          content:
            application/json:
              schema:
                type: object
              example:
                id: 1
                username: john_doe
                password: $2a$10$1MLTqf8ZsY/4V5vY17/xXOlx/ml6/xFhmCKHkpM5k/0oh6anB0yRy
                email: john.doe@example.com
    delete:
      tags:
        - General
      summary: delete
      security:
        - bearerAuth: []
      responses:
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Date:
              schema:
                type: string
                example: Wed, 06 Dec 2023 04:35:45 GMT
            Connection:
              schema:
                type: string
                example: close
          content:
            application/json:
              schema:
                type: object
              example:
                timestamp: '2023-12-06T04:35:45.219+00:00'
                status: 500
                error: Internal Server Error
                trace: "com.example.b2chat.excepciones.BusinessUserException: El usuario no existe\r\n\tat com.example.b2chat.excepciones.BusinessUserException$Type.build(BusinessUserException.java:15)\r\n\tat java.base/java.util.Optional.orElseThrow(Optional.java:403)\r\n\tat com.example.b2chat.service.UserService.deleteUser(UserService.java:37)\r\n\tat com.example.b2chat.controller.UserController.deleteUser(UserController.java:55)\r\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\r\n\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:254)\r\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:182)\r\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)\r\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)\r\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)\r\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)\r\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)\r\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)\r\n\tat org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:936)\r\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:596)\r\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\r\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\r\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\r\n\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\r\n\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\r\n\tat org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\r\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\r\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)\r\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\r\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)\r\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)\r\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\r\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\r\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)\r\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)\r\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\r\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)\r\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)\r\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\r\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\r\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\r\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\r\n"
                message: El usuario no existe
                path: /v1/users/6
  /v1/auth/generateToken:
    post:
      tags:
        - General
      summary: autenticarse
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: john_doe
                password: StrongPwd1!
      responses:
        '200':
          description: OK
          headers:
            Vary:
              schema:
                type: string
                example: Access-Control-Request-Headers
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            Cache-Control:
              schema:
                type: string
                example: no-cache, no-store, max-age=0, must-revalidate
            Pragma:
              schema:
                type: string
                example: no-cache
            Expires:
              schema:
                type: integer
                example: '0'
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Content-Type:
              schema:
                type: string
                example: text/plain;charset=UTF-8
            Content-Length:
              schema:
                type: integer
                example: '135'
            Date:
              schema:
                type: string
                example: Wed, 06 Dec 2023 17:13:06 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=60
            Connection:
              schema:
                type: string
                example: keep-alive
          content:
            text/plain:
              schema:
                type: string
              example: >-
                eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqb2huX2RvZSIsImlhdCI6MTcwMTg4Mjc4NiwiZXhwIjoxNzAxODg0NTg2fQ.ifbrAv58vbhoF_LBxsF6X4zLglw0PTEy-uQ9Hf4ohkY
